// Generated by gencpp from file controller/PassingVehicle.msg
// DO NOT EDIT!


#ifndef CONTROLLER_MESSAGE_PASSINGVEHICLE_H
#define CONTROLLER_MESSAGE_PASSINGVEHICLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace controller
{
template <class ContainerAllocator>
struct PassingVehicle_
{
  typedef PassingVehicle_<ContainerAllocator> Type;

  PassingVehicle_()
    : location()
    , is_passing(false)  {
    }
  PassingVehicle_(const ContainerAllocator& _alloc)
    : location(_alloc)
    , is_passing(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _location_type;
  _location_type location;

   typedef uint8_t _is_passing_type;
  _is_passing_type is_passing;





  typedef boost::shared_ptr< ::controller::PassingVehicle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::controller::PassingVehicle_<ContainerAllocator> const> ConstPtr;

}; // struct PassingVehicle_

typedef ::controller::PassingVehicle_<std::allocator<void> > PassingVehicle;

typedef boost::shared_ptr< ::controller::PassingVehicle > PassingVehiclePtr;
typedef boost::shared_ptr< ::controller::PassingVehicle const> PassingVehicleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::controller::PassingVehicle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::controller::PassingVehicle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::controller::PassingVehicle_<ContainerAllocator1> & lhs, const ::controller::PassingVehicle_<ContainerAllocator2> & rhs)
{
  return lhs.location == rhs.location &&
    lhs.is_passing == rhs.is_passing;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::controller::PassingVehicle_<ContainerAllocator1> & lhs, const ::controller::PassingVehicle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::controller::PassingVehicle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controller::PassingVehicle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::controller::PassingVehicle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::controller::PassingVehicle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller::PassingVehicle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller::PassingVehicle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::controller::PassingVehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "662c35d407630f0948e461ff439fcd61";
  }

  static const char* value(const ::controller::PassingVehicle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x662c35d407630f09ULL;
  static const uint64_t static_value2 = 0x48e461ff439fcd61ULL;
};

template<class ContainerAllocator>
struct DataType< ::controller::PassingVehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "controller/PassingVehicle";
  }

  static const char* value(const ::controller::PassingVehicle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::controller::PassingVehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string location # North, East, South, West\n"
"bool is_passing\n"
;
  }

  static const char* value(const ::controller::PassingVehicle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::controller::PassingVehicle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.location);
      stream.next(m.is_passing);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PassingVehicle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::controller::PassingVehicle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::controller::PassingVehicle_<ContainerAllocator>& v)
  {
    s << indent << "location: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.location);
    s << indent << "is_passing: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_passing);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROLLER_MESSAGE_PASSINGVEHICLE_H
