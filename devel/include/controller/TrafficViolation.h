// Generated by gencpp from file controller/TrafficViolation.msg
// DO NOT EDIT!


#ifndef CONTROLLER_MESSAGE_TRAFFICVIOLATION_H
#define CONTROLLER_MESSAGE_TRAFFICVIOLATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace controller
{
template <class ContainerAllocator>
struct TrafficViolation_
{
  typedef TrafficViolation_<ContainerAllocator> Type;

  TrafficViolation_()
    : location()
    , violation_detected(false)
    , timestamp(0.0)  {
    }
  TrafficViolation_(const ContainerAllocator& _alloc)
    : location(_alloc)
    , violation_detected(false)
    , timestamp(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _location_type;
  _location_type location;

   typedef uint8_t _violation_detected_type;
  _violation_detected_type violation_detected;

   typedef float _timestamp_type;
  _timestamp_type timestamp;





  typedef boost::shared_ptr< ::controller::TrafficViolation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::controller::TrafficViolation_<ContainerAllocator> const> ConstPtr;

}; // struct TrafficViolation_

typedef ::controller::TrafficViolation_<std::allocator<void> > TrafficViolation;

typedef boost::shared_ptr< ::controller::TrafficViolation > TrafficViolationPtr;
typedef boost::shared_ptr< ::controller::TrafficViolation const> TrafficViolationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::controller::TrafficViolation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::controller::TrafficViolation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::controller::TrafficViolation_<ContainerAllocator1> & lhs, const ::controller::TrafficViolation_<ContainerAllocator2> & rhs)
{
  return lhs.location == rhs.location &&
    lhs.violation_detected == rhs.violation_detected &&
    lhs.timestamp == rhs.timestamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::controller::TrafficViolation_<ContainerAllocator1> & lhs, const ::controller::TrafficViolation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::controller::TrafficViolation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controller::TrafficViolation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::controller::TrafficViolation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::controller::TrafficViolation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller::TrafficViolation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller::TrafficViolation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::controller::TrafficViolation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b565cc422536c9871f3e727883ef5afb";
  }

  static const char* value(const ::controller::TrafficViolation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb565cc422536c987ULL;
  static const uint64_t static_value2 = 0x1f3e727883ef5afbULL;
};

template<class ContainerAllocator>
struct DataType< ::controller::TrafficViolation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "controller/TrafficViolation";
  }

  static const char* value(const ::controller::TrafficViolation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::controller::TrafficViolation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string location\n"
"bool violation_detected\n"
"float32 timestamp\n"
;
  }

  static const char* value(const ::controller::TrafficViolation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::controller::TrafficViolation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.location);
      stream.next(m.violation_detected);
      stream.next(m.timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrafficViolation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::controller::TrafficViolation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::controller::TrafficViolation_<ContainerAllocator>& v)
  {
    s << indent << "location: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.location);
    s << indent << "violation_detected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.violation_detected);
    s << indent << "timestamp: ";
    Printer<float>::stream(s, indent + "  ", v.timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROLLER_MESSAGE_TRAFFICVIOLATION_H
