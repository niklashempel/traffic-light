// Generated by gencpp from file controller/TrafficLightState.msg
// DO NOT EDIT!


#ifndef CONTROLLER_MESSAGE_TRAFFICLIGHTSTATE_H
#define CONTROLLER_MESSAGE_TRAFFICLIGHTSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace controller
{
template <class ContainerAllocator>
struct TrafficLightState_
{
  typedef TrafficLightState_<ContainerAllocator> Type;

  TrafficLightState_()
    : direction()
    , state()
    , duration(0.0)  {
    }
  TrafficLightState_(const ContainerAllocator& _alloc)
    : direction(_alloc)
    , state(_alloc)
    , duration(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _direction_type;
  _direction_type direction;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _state_type;
  _state_type state;

   typedef float _duration_type;
  _duration_type duration;





  typedef boost::shared_ptr< ::controller::TrafficLightState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::controller::TrafficLightState_<ContainerAllocator> const> ConstPtr;

}; // struct TrafficLightState_

typedef ::controller::TrafficLightState_<std::allocator<void> > TrafficLightState;

typedef boost::shared_ptr< ::controller::TrafficLightState > TrafficLightStatePtr;
typedef boost::shared_ptr< ::controller::TrafficLightState const> TrafficLightStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::controller::TrafficLightState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::controller::TrafficLightState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::controller::TrafficLightState_<ContainerAllocator1> & lhs, const ::controller::TrafficLightState_<ContainerAllocator2> & rhs)
{
  return lhs.direction == rhs.direction &&
    lhs.state == rhs.state &&
    lhs.duration == rhs.duration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::controller::TrafficLightState_<ContainerAllocator1> & lhs, const ::controller::TrafficLightState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::controller::TrafficLightState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controller::TrafficLightState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::controller::TrafficLightState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::controller::TrafficLightState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller::TrafficLightState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller::TrafficLightState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::controller::TrafficLightState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "52bcdc476bde5096da27668421adb68e";
  }

  static const char* value(const ::controller::TrafficLightState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x52bcdc476bde5096ULL;
  static const uint64_t static_value2 = 0xda27668421adb68eULL;
};

template<class ContainerAllocator>
struct DataType< ::controller::TrafficLightState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "controller/TrafficLightState";
  }

  static const char* value(const ::controller::TrafficLightState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::controller::TrafficLightState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string direction\n"
"string state\n"
"float32 duration\n"
;
  }

  static const char* value(const ::controller::TrafficLightState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::controller::TrafficLightState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.direction);
      stream.next(m.state);
      stream.next(m.duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrafficLightState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::controller::TrafficLightState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::controller::TrafficLightState_<ContainerAllocator>& v)
  {
    s << indent << "direction: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.direction);
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.state);
    s << indent << "duration: ";
    Printer<float>::stream(s, indent + "  ", v.duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROLLER_MESSAGE_TRAFFICLIGHTSTATE_H
